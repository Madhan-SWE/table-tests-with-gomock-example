// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/party/visitor-lister.go

// Package mock_party is a generated GoMock package.
package mock_party

import (
	party "github.com/areknoster/table-driven-tests-gomock/pkg/party"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockVisitorLister is a mock of VisitorLister interface
type MockVisitorLister struct {
	ctrl     *gomock.Controller
	recorder *MockVisitorListerMockRecorder
}

// MockVisitorListerMockRecorder is the mock recorder for MockVisitorLister
type MockVisitorListerMockRecorder struct {
	mock *MockVisitorLister
}

// NewMockVisitorLister creates a new mock instance
func NewMockVisitorLister(ctrl *gomock.Controller) *MockVisitorLister {
	mock := &MockVisitorLister{ctrl: ctrl}
	mock.recorder = &MockVisitorListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVisitorLister) EXPECT() *MockVisitorListerMockRecorder {
	return m.recorder
}

// ListVisitors mocks base method
func (m *MockVisitorLister) ListVisitors(who party.VisitorGroup) ([]party.Visitor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVisitors", who)
	ret0, _ := ret[0].([]party.Visitor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVisitors indicates an expected call of ListVisitors
func (mr *MockVisitorListerMockRecorder) ListVisitors(who interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVisitors", reflect.TypeOf((*MockVisitorLister)(nil).ListVisitors), who)
}
